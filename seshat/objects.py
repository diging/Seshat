"""Defines the various object types used by seshat."""

import time
import random
from Databases.googledb import Datastore as ds

# TODO: Create more datastore options.
datastore = "google"

def main():
    print "Nothing to see here."

class SeshatObject:
    """Base class for all data objects used by Seshat. Each new object is given an internal ID, which is based on a unix timestamp."""

    def __init__(self, id):
        """Initialize the SeshatObject."""
        
        # Link this SeshatObject to a datastore object, e.g. a Google Datastore entity.
        if id is not None:
            self.load(id)
            self.id = id
        else:
            self.new()
            self.title = title
        self.uri = ""               # This could be a handle generated by DSpace after ingestion, a database permalink, or a URI from an authority file.

    def load(self, id):
        """Treats this object as an extant datum. Searches the datastore for the corresponding entity, and populates the present object's attributes. Returns False if no such entity is found in the datastore, otherwise returns True.
        
        Arguments:
        id -- A unique ID based on a unix timestamp (string)."""
        
        if datastore == "google":
            found = False
            # TODO: search the Google datastore for the corresponding entity.
            if found:
                # TODO: set self.data.
                # TODO: populate attributes from the datastore entity.
                pass
            return found
        
    def new(self):
        """Called by __init__(). Treats this object as a new datum. Generates a new ID, and creates a new entity in the datastore."""
        self.id = str(time.time()) + str(random.randrange(9))
        self.data = ds.new(type(self))
    
    def update(self):
        """Updates the database with any new changes to this object."""
        self.data.put()

class Paper(SeshatObject):
    """The Paper is the unit of currency of the whole operation. These are created from data provided by the user, and are updated throughout the workflow."""
    
    def __init__(self, id=None):
        """Create a new paper object.
        
        Since different data sources will provide records of varying degrees of completeness, the class is initialized without any input."""
        
        super().__init__(id)
        
        self.citation = {}          # The specific fields will vary, depending on publication type.
        self.abstract = ""
        self.pdf = ""               # A path to a PDF.
        self.full_text = ""         # A path to a plain text file.
        self.references_text = ""   # A path to a plain text file containing bibliographic references.
        self.references = []        # A list of paper IDs.
    
class Author(SeshatObject):
    """An Author refers to a human who wrote something. Each object should refer to a concept in an authority, such as ConceptPower."""
    
    def __init__(self, id=None):
        """Create a new author object. Since working with an author may involve creating new concepts in an authority, the class is initialized without a handle."""

        super().__init__(id)
        
        self.name = ""
         
class DSpace_Object(SeshatObject):
    """These are used to prepare papers for ingestion into a DSpace repository. This class is based on the metadata standards for the Digital HPS Community Repository, which is based on Dublin Core."""
    
    def __init__(self, id=None):
        """Create a new dspace object, with the ID of the corresponding paper.
        
        Arguments:
        id -- The internal ID of the paper (string)."""
        
        super().__init__(id)
        
        self.id = id
    
        # TODO: add metadata fields
        
class Corpus(SeshatObject):
    """A corpus is a collection of papers."""
    
    def __init__(self, id=None, title=""):
        """Create a new corpus. This is basically just a bag of Paper IDs."""

        super().__init__(id)
    
        self.papers = []    # This will contain the IDs of papers in this corpus.
        

if __name__ == '__main__':
    status = main()
    sys.exit(status)