"""Defines the various object types used by seshat."""

import time
import random

def main():
    print "Nothing to see here."
    
class paper:
    """The central currency of the whole operation. These are created from data provided by the user, and are updated throughout the workflow."""
    
    def __init__(self):
        """Create a new paper object.
        
        Since different data sources will provide records of varying degrees of completeness, the class is initialized without any input. Each new paper is given an internal ID, which is based on a unix timestamp."""

        self.id = str(time.time()) + str(random.randrange(9))
        self.uri = ""               # This will be a handle generated by DSpace after ingestion.
        
        self.citation = {}          # The specific fields will vary, depending on publication type.
        self.abstract = ""
        self.pdf = ""               # A path to a PDF.
        self.full_text = ""         # A path to a plain text file.
        self.references_text = ""   # A path to a plain text file containing bibliographic references.
        self.references = []        # A list of paper IDs.
        
class author:
    """An author is a human who wrote something. Each object should refer to a concept in an authority, such as ConceptPower."""
    
    def __init__(self, name):
        """Create a new author object.
        
        Arguments:
        name -- The name of the author (string).
        
        Since working with an author may involve creating new concepts in an authority, the class is initialized without a handle.  Each new author is given an internal ID, which is based on a unix timestamp."""
        
        self.id = str(time.time()) + str(random.randrange(9))
        self.uri = ''               # This should be a handle of a concept in an authority file, such as ConceptPower.
        self.name = name
        
class dspace_object:
    """These are used to prepare papers for ingestion into a DSpace repository. This class is based on the metadata standards for the Digital HPS Community Repository, which is based on Dublin Core."""
    
    def __init__(self, id):
        """Create a new dspace object, with the ID of the corresponding paper.
        
        Arguments:
        id -- The internal ID of the paper (string)."""
        
        self.id = id
        
        # TODO: add metadata fields
        
class corpus:
    """A corpus is a collection of papers."""
    
    def __init__(self):
        """Create a new corpus. Each new corpus is given an internal ID, which is based on a unix timestamp."""
        
        self.id = str(time.time()) + str(random.randrange(9))
        self.papers = []    # This will contain the IDs of papers in this corpus.

if __name__ == '__main__':
    status = main()
    sys.exit(status)